package problem

import EulerProblem
import java.math.BigDecimal

/**
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 */
class Problem2 : EulerProblem {

    override fun getResult(): BigDecimal {
        var sum: Long = 0

        var last: Long = 1
        var current: Long = 2

        while (current < 4_000_000) {
            if ((current % 2) == 0L) {
                sum += current
            }
            val next = last + current
            last = current
            current = next
        }
        return sum.toBigDecimal()
    }

}